AWSTemplateFormatVersion: 2010-09-09
Description: Iac for Dal Vacation Home
Resources:
  # Lambda - Authentication
  LambdaRegister:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaRegister"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::082497693506:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          UserDalVacationDynamoTableName: !Ref UserDalVacationDynamoTable
          DalVacationHomeUserPoolId: !Ref UserPool
          DalVacationHomeAppClientId: !Ref UserPoolClient
      Code:
        S3Bucket: "dalvacation-lambda-bucket-yuci" #replace it with your own S3bucket
        S3Key: "LambdaRegister.zip"

  LambdaConfirmUser:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaConfirmUser"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::082497693506:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          DalVacationHomeUserPoolId: !Ref UserPool
          DalVacationHomeAppClientId: !Ref UserPoolClient
      Code:
        S3Bucket: "dalvacation-lambda-bucket-yuci" #replace it with your own S3bucket
        S3Key: "LambdaConfirmUser.zip"

  LambdaLogin1stFactor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaLogin1stFactor"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::082497693506:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          UserDalVacationDynamoTableName: !Ref UserDalVacationDynamoTable
          DalVacationHomeAppClientId: !Ref UserPoolClient
      Code:
        S3Bucket: "dalvacation-lambda-bucket-yuci" #replace it with your own S3bucket
        S3Key: "LambdaLogin1stFactor.zip"

  LambdaLogin2ndFactor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaLogin2ndFactor"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::082497693506:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          UserDalVacationDynamoTableName: !Ref UserDalVacationDynamoTable
      Code:
        S3Bucket: "dalvacation-lambda-bucket-yuci" #replace it with your own S3bucket
        S3Key: "LambdaLogin2ndFactor.zip"

  LambdaLogin3rdFactor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaLogin3rdFactor"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::082497693506:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          UserDalVacationDynamoTableName: !Ref UserDalVacationDynamoTable
      Code:
        S3Bucket: "dalvacation-lambda-bucket-yuci" #replace it with your own S3bucket
        S3Key: "LambdaLogin3rdFactor.zip"
  LambdaAddFeedback:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaAddFeedback"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::082497693506:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          FeedbackDalVacationDynamoTableName: !Ref FeedbackDalVacationDynamoTable #replace token and api with your own
          GOOGLE_API_ACCESS_TOKEN: "ya29.a0AXooCgtQq0Lc3Kt9bVWFYTQNY55OKatUxV68K4KB8zuSEoOdEJq196pFWPE19ldZBinVG-8Wy5Z2jLhGQxJUT4AO2YtbhhBnmtlbkZt3fRbBqXZJKLosynKmHoU1g6uck3VPnJ1FoEtX0v5wG6I5ZRRfc9g7uaKvB3xkEeztrPO1rcPYbrmUrNAk6VnZonYqmCfjNOwL0E0E5CT3ooQJKvhQ01ipFEk4014eOavKpnR02pzsJSPK3UFod-YVgfcLOUuVmxsZQFkg0EyUuJy-o9RdgasRDe4EEit8rNRywJ3a15hUsvv6ejQMZdAfpd_K0DssN2AViNpEnDNIaA3VT4ZEdZOMCtb9GHThubeffgy2m70erJc0cdUECE8df13tZSlg071V8YZixbC1Sf6OiYKtAKv7XoPOaCgYKAbQSARMSFQHGX2MidkqM3fP5V37cEEairuGdHQ0423"
          API_ENDPOINT: "https://us-central1-aiplatform.googleapis.com/v1/projects/csci-5410-serverless-428001/locations/us-central1/publishers/google/models/gemini-1.5-flash-001:streamGenerateContent"
      Code:
        S3Bucket: "dalvacation-lambda-bucket-yuci" #replace it with your own S3bucket
        S3Key: "AddFeedback.zip"
  # Lambda - Booking
  LambdaGetAllRoomDetails:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaGetAllRoomDetails"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::082497693506:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: "dalvacation-lambda-bucket-yuci" #replace it with your own S3bucket
        S3Key: "LambdaGetAllRoomDetails.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref RoomsTable

  LambdaGetRoomDetailsByRoomId:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaGetRoomDetailsByRoomId"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::082497693506:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: "dalvacation-lambda-bucket-yuci" #replace it with your own S3bucket
        S3Key: "LambdaGetRoomDetailsByRoomId.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref RoomsTable

  LambdaAddRoomDetails:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaAddRoomDetails"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::082497693506:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: "dalvacation-lambda-bucket-yuci" #replace it with your own S3bucket
        S3Key: "LambdaAddRoomDetails.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref RoomsTable

  LambdaUpdateRoomDetails:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaUpdateRoomDetails"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::082497693506:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: "dalvacation-lambda-bucket-yuci" #replace it with your own S3bucket
        S3Key: "LambdaUpdateRoomDetails.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref RoomsTable

  LambdaDeleteRoomDetails:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaDeleteRoomDetails"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::082497693506:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: "dalvacation-lambda-bucket-yuci" #replace it with your own S3bucket
        S3Key: "LambdaDeleteRoomDetails.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref RoomsTable

  #Dynamo DB
  UserDalVacationDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserDalVacation
      AttributeDefinitions:
        - AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "email"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  FeedbackDalVacationDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: FeedbackDalVacation
      AttributeDefinitions:
        - AttributeName: "feedback_id"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "feedback_id"
          KeyType: "HASH"
        - AttributeName: "timestamp"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  RoomsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "Rooms"
      AttributeDefinitions:
        - AttributeName: "room_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "room_id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Cognito
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: DALVacationHomeUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireNumbers: true
      MfaConfiguration: "OFF"

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: DALVacationHomeAppClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO

  # API GATEWAY - Resources
  DalVacationHomeApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DalVacationHomeApiGateway


  # General API Resource
  DalVacationHomeApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DalVacationHomeApiGateway
  # Feedback API
  FeedbackApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt DalVacationHomeApiGateway.RootResourceId
      PathPart: "feedback"
  AddFeedbackApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt FeedbackApiResource.ResourceId
      PathPart: "addFeedback"
  # Authentication API Resource
  UserAuthenticationApiAuthenticationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt DalVacationHomeApiGateway.RootResourceId
      PathPart: "authentication"

  # Signup API Resource
  UserAuthenticationApiSignupResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt UserAuthenticationApiAuthenticationResource.ResourceId
      PathPart: "signup"

  UserAuthenticationApiSignupConfirmationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt UserAuthenticationApiSignupResource.ResourceId
      PathPart: "confirmation"

  # Login API Resource
  UserAuthenticationApiLoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt UserAuthenticationApiAuthenticationResource.ResourceId
      PathPart: "login"

  UserAuthenticationApiLogin1stResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt UserAuthenticationApiLoginResource.ResourceId
      PathPart: "1st"

  UserAuthenticationApiLogin2ndResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt UserAuthenticationApiLoginResource.ResourceId
      PathPart: "2nd"

  UserAuthenticationApiLogin3rdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt UserAuthenticationApiLoginResource.ResourceId
      PathPart: "3rd"

  #Booking API Resource
  RoomBookingApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt DalVacationHomeApiGateway.RootResourceId
      PathPart: "booking"

  RoomBookingApiGetAllRoomDetailsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt RoomBookingApiResource.ResourceId
      PathPart: "allroomdetails"

  RoomBookingApiGetRoomDetailsByRoomIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt RoomBookingApiResource.ResourceId
      PathPart: "roomdetails"

  RoomBookingApiAddRoomDetailsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt RoomBookingApiResource.ResourceId
      PathPart: "addroomdetails"

  RoomBookingApiUpdateRoomDetailsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt RoomBookingApiResource.ResourceId
      PathPart: "updateroomdetails"

  RoomBookingApiDeleteRoomDetailsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ParentId: !GetAtt RoomBookingApiResource.ResourceId
      PathPart: "deleteroomdetails"

  # API GATEWAY - Methods
  # Authentication API Methods
  SignUpMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ResourceId: !Ref UserAuthenticationApiSignupResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaRegister.Arn}/invocations"
        Credentials: "arn:aws:iam::082497693506:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  ConfirmationMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ResourceId: !Ref UserAuthenticationApiSignupConfirmationResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaConfirmUser.Arn}/invocations"
        Credentials: "arn:aws:iam::082497693506:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  FirstLoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ResourceId: !Ref UserAuthenticationApiLogin1stResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaLogin1stFactor.Arn}/invocations"
        Credentials: "arn:aws:iam::082497693506:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  SecondLoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ResourceId: !Ref UserAuthenticationApiLogin2ndResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaLogin2ndFactor.Arn}/invocations"
        Credentials: "arn:aws:iam::082497693506:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  ThirdLoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ResourceId: !Ref UserAuthenticationApiLogin3rdResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaLogin3rdFactor.Arn}/invocations"
        Credentials: "arn:aws:iam::082497693506:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
  AddFeedbackMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ResourceId: !Ref AddFeedbackApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAddFeedback.Arn}/invocations"
        Credentials: "arn:aws:iam::082497693506:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
  GetAllRoomDetailsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ResourceId: !Ref RoomBookingApiGetAllRoomDetailsResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaGetAllRoomDetails.Arn}/invocations"
        Credentials: "arn:aws:iam::082497693506:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  GetRoomDetailsByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ResourceId: !Ref RoomBookingApiGetRoomDetailsByRoomIdResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaGetRoomDetailsByRoomId.Arn}/invocations"
        Credentials: "arn:aws:iam::082497693506:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  AddRoomDetailsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ResourceId: !Ref RoomBookingApiAddRoomDetailsResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAddRoomDetails.Arn}/invocations"
        Credentials: "arn:aws:iam::082497693506:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  UpdateRoomDetailsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ResourceId: !Ref RoomBookingApiUpdateRoomDetailsResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaUpdateRoomDetails.Arn}/invocations"
        Credentials: "arn:aws:iam::082497693506:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  DeleteRoomDetailsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      ResourceId: !Ref RoomBookingApiDeleteRoomDetailsResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaDeleteRoomDetails.Arn}/invocations"
        Credentials: "arn:aws:iam::082497693506:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  DalVacationHomeApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
      DeploymentId: !Ref DalVacationHomeApiDeployment
      StageName: api

  DalVacationHomeApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SignUpMethod
      - ConfirmationMethod
      - FirstLoginMethod
      - SecondLoginMethod
      - ThirdLoginMethod
      - GetAllRoomDetailsMethod
      - GetRoomDetailsByIdMethod
      - AddRoomDetailsMethod
      - UpdateRoomDetailsMethod
      - DeleteRoomDetailsMethod
      - AddFeedbackMethod
    Properties:
      RestApiId: !Ref DalVacationHomeApiGateway
  
