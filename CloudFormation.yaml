AWSTemplateFormatVersion: 2010-09-09
Description: Iac for Dal Vacation Home
Resources:
  LambdaRegister:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaRegister"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::160536684166:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          UserDalVacationDynamoTableName: !Ref UserDalVacationDynamoTable
          DalVacationHomeUserPoolId: !Ref UserPool
          DalVacationHomeAppClientId: !Ref UserPoolClient
      Code:
        S3Bucket: "dalvacation-lambda-bucket" #replace it with your own S3bucket
        S3Key: "LambdaRegister.zip"

  LambdaConfirmUser:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaConfirmUser"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::160536684166:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          DalVacationHomeUserPoolId: !Ref UserPool
          DalVacationHomeAppClientId: !Ref UserPoolClient
      Code:
        S3Bucket: "dalvacation-lambda-bucket" #replace it with your own S3bucket
        S3Key: "LambdaConfirmUser.zip"

  LambdaLogin1stFactor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaLogin1stFactor"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::160536684166:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          UserDalVacationDynamoTableName: !Ref UserDalVacationDynamoTable
          DalVacationHomeAppClientId: !Ref UserPoolClient
      Code:
        S3Bucket: "dalvacation-lambda-bucket" #replace it with your own S3bucket
        S3Key: "LambdaLogin1stFactor.zip"

  LambdaLogin2ndFactor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaLogin2ndFactor"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::160536684166:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          UserDalVacationDynamoTableName: !Ref UserDalVacationDynamoTable
      Code:
        S3Bucket: "dalvacation-lambda-bucket" #replace it with your own S3bucket
        S3Key: "LambdaLogin2ndFactor.zip"
  LambdaLogin3rdFactor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "LambdaLogin3rdFactor"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::160536684166:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Environment:
        Variables:
          UserDalVacationDynamoTableName: !Ref UserDalVacationDynamoTable
      Code:
        S3Bucket: "dalvacation-lambda-bucket" #replace it with your own S3bucket
        S3Key: "LambdaLogin3rdFactor.zip"

  UserDalVacationDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserDalVacation
      AttributeDefinitions:
        - AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "email"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: DALVacationHomeUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireNumbers: true
      MfaConfiguration: "OFF"

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: DALVacationHomeAppClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO

  # API GATEWAY

  UserAuthenticationApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: UserAuthenticationApiGateway

  UserAuthenticationApiAuthenticationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      ParentId: !GetAtt UserAuthenticationApiGateway.RootResourceId
      PathPart: "authentication"

  UserAuthenticationApiSignupResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      ParentId: !GetAtt UserAuthenticationApiAuthenticationResource.ResourceId
      PathPart: "signup"

  UserAuthenticationApiLoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      ParentId: !GetAtt UserAuthenticationApiAuthenticationResource.ResourceId
      PathPart: "login"

  UserAuthenticationApiSignupConfirmationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      ParentId: !GetAtt UserAuthenticationApiSignupResource.ResourceId
      PathPart: "confirmation"

  UserAuthenticationApiLogin1stResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      ParentId: !GetAtt UserAuthenticationApiLoginResource.ResourceId
      PathPart: "1st"

  UserAuthenticationApiLogin2ndResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      ParentId: !GetAtt UserAuthenticationApiLoginResource.ResourceId
      PathPart: "2nd"

  UserAuthenticationApiLogin3rdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      ParentId: !GetAtt UserAuthenticationApiLoginResource.ResourceId
      PathPart: "3rd"
      
  SignUpMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      ResourceId: !Ref UserAuthenticationApiSignupResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaRegister.Arn}/invocations"
        Credentials: "arn:aws:iam::160536684166:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  ConfirmationMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      ResourceId: !Ref UserAuthenticationApiSignupConfirmationResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaConfirmUser.Arn}/invocations"
        Credentials: "arn:aws:iam::160536684166:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  FirstLoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      ResourceId: !Ref UserAuthenticationApiLogin1stResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaLogin1stFactor.Arn}/invocations"
        Credentials: "arn:aws:iam::160536684166:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  SecondLoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      ResourceId: !Ref UserAuthenticationApiLogin2ndResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaLogin2ndFactor.Arn}/invocations"
        Credentials: "arn:aws:iam::160536684166:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  ThirdLoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      ResourceId: !Ref UserAuthenticationApiLogin3rdResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain
      RequestParameters: {}
      RequestModels: {}
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaLogin3rdFactor.Arn}/invocations"
        Credentials: "arn:aws:iam::160536684166:role/LabRole"
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'" # replace it with you own domain

  UserAuthenticationApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway
      DeploymentId: !Ref UserAuthenticationApiDeployment
      StageName: v1

  UserAuthenticationApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SignUpMethod
      - ConfirmationMethod
      - FirstLoginMethod
      - SecondLoginMethod
      - ThirdLoginMethod
    Properties:
      RestApiId: !Ref UserAuthenticationApiGateway

  RoomsTable:
    Type: "AWS::DynamoDB::Table"
    Properties: 
      TableName: "Rooms"
      AttributeDefinitions: 
        - AttributeName: "room_id"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "room_id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  RoomDetailsAPIGateway:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties: 
      Name: 'RoomDetailsAPIGateway'
      ProtocolType: 'HTTP'
      CorsConfiguration:
        AllowHeaders: 
          - '*'
        AllowMethods: 
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowOrigins: 
          - '*'
      Tags:
        Environment: 'dev'

  RoomDetailsAPIDevStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties: 
      ApiId: 
        Ref: 'RoomDetailsAPIGateway'
      StageName: 'dev'
      AutoDeploy: true

  GetAllRoomDetails:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "GetAllRoomDetails"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::053346983886:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: "dalvacation-lambda-code" #replace it with your own S3bucket
        S3Key: "GetAllRoomDetails.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref RoomsTable

  GetRoomDetailsByRoomId:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "GetRoomDetailsByRoomId"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::053346983886:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: "dalvacation-lambda-code" #replace it with your own S3bucket
        S3Key: "GetRoomDetailsByRoomId.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref RoomsTable

  AddRoomDetails:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "AddRoomDetails"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::053346983886:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: "dalvacation-lambda-code" #replace it with your own S3bucket
        S3Key: "AddRoomDetails.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref RoomsTable

  UpdateRoomDetails:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "UpdateRoomDetails"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::053346983886:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: "dalvacation-lambda-code" #replace it with your own S3bucket
        S3Key: "UpdateRoomDetails.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref RoomsTable

  DeleteRoomDetails:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "DeleteRoomDetails"
      Runtime: "nodejs20.x"
      Role: "arn:aws:iam::053346983886:role/LabRole" #replace it with your own LabRole ARN
      Handler: "index.handler"
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: "dalvacation-lambda-code" #replace it with your own S3bucket
        S3Key: "DeleteRoomDetails.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref RoomsTable

  GetAllRoomDetailsAPIIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref RoomDetailsAPIGateway
      IntegrationType: 'AWS_PROXY'
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllRoomDetails.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  GetAllRoomDetailsAPIRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref RoomDetailsAPIGateway
      RouteKey: 'GET /GetAllRoomDetails'
      Target: !Sub 'integrations/${GetAllRoomDetailsAPIIntegration}'

  GetAllRoomDetailAPIStageInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref GetAllRoomDetails
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RoomDetailsAPIGateway}/dev/GET/GetAllRoomDetails'

  GetRoomDetailsByRoomIdAPIIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref RoomDetailsAPIGateway
      IntegrationType: 'AWS_PROXY'
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRoomDetailsByRoomId.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  GetRoomDetailsByRoomIdAPIRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref RoomDetailsAPIGateway
      RouteKey: 'GET /GetRoomDetailsByRoomId'
      Target: !Sub 'integrations/${GetRoomDetailsByRoomIdAPIIntegration}'

  GetRoomDetailsByRoomIdAPIStageInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref GetRoomDetailsByRoomId
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RoomDetailsAPIGateway}/dev/GET/GetRoomDetailsByRoomId'

  AddRoomDetailsAPIIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref RoomDetailsAPIGateway
      IntegrationType: 'AWS_PROXY'
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddRoomDetails.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  AddRoomDetailsAPIRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref RoomDetailsAPIGateway
      RouteKey: 'POST /AddRoomDetails'
      Target: !Sub 'integrations/${AddRoomDetailsAPIIntegration}'

  AddRoomDetailsAPIStageInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref AddRoomDetails
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RoomDetailsAPIGateway}/dev/POST/AddRoomDetails'

  UpdateRoomDetailsAPIIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref RoomDetailsAPIGateway
      IntegrationType: 'AWS_PROXY'
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateRoomDetails.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  UpdateRoomDetailsAPIRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref RoomDetailsAPIGateway
      RouteKey: 'PUT /UpdateRoomDetails'
      Target: !Sub 'integrations/${UpdateRoomDetailsAPIIntegration}'

  UpdateRoomDetailsAPIStageInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref UpdateRoomDetails
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RoomDetailsAPIGateway}/dev/PUT/UpdateRoomDetails'

  DeleteRoomDetailsAPIIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref RoomDetailsAPIGateway
      IntegrationType: 'AWS_PROXY'
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteRoomDetails.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  DeleteRoomDetailsAPIRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref RoomDetailsAPIGateway
      RouteKey: 'DELETE /DeleteRoomDetails'
      Target: !Sub 'integrations/${DeleteRoomDetailsAPIIntegration}'

  DeleteRoomDetailsAPIStageInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref DeleteRoomDetails
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RoomDetailsAPIGateway}/dev/DELETE/DeleteRoomDetails'

Outputs:
  ApiGatewayUrl:
    Value: !Sub 'https://${RoomDetailsAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/dev'
    Description: 'URL for the API Gateway Stage'